
AC_INIT([futures], [0.0], [chasapis@lri.fr])
AM_INIT_AUTOMAKE([1.10 -Wall no-define])

# Generate two configuration headers; one for building the library itself with
# an autogenerated template, and a second one that will be installed alongside
# the library.
AC_CONFIG_HEADERS([config.h])

AC_PROG_CXX([mpic++])
LT_INIT([disable-static])

BOOST_REQUIRE([1.45])
BOOST_SERIALIZATION

CXXFLAGS="-O3 -std=c++0x"

AC_ARG_ENABLE(debug,
              [  --enable-debug          Enable debugging information],
              USE_DEBUG="$enableval", USE_DEBUG="no")

if test $USE_DEBUG = yes ; then 
	CXXFLAGS="$CXXFLAGS -g -DDEBUG"
else
  CXXFLAGS="$CXXFLAGS"
fi


AC_ARG_ENABLE(stats,
              [  --enable-stats          Enable program statistics],
              USE_STATS="$enableval", USE_STATS="no")

if test $USE_STATS = yes ; then 
	CXXFLAGS="$CXXFLAGS -DSTATS"
else
  CXXFLAGS="$CXXFLAGS"
fi

# Define these substitions here to keep all version information in one place.
# For information on how to properly maintain the library version information,
# refer to the libtool manual, section "Updating library version information":
# http://www.gnu.org/software/libtool/manual/html_node/Updating-version-info.html
AC_SUBST([FUTURES_SO_VERSION], [0:0:0])
AC_SUBST([FUTURES_API_VERSION], [0.0])
AC_SUBST([MUTEX_SO_VERSION], [0:0:0])
AC_SUBST([MUTEX_API_VERSION], [0.0])

# Override the template file name of the generated .pc file, so that there
# is no need to rename the template file when the API version changes.
AC_CONFIG_FILES([Makefile
								 mutex/Makefile
								 futures/Makefile
								 tests/Makefile
								 mutex/mutex-${MUTEX_API_VERSION}.pc:mutex/mutex.pc.in
                 futures/futures-${FUTURES_API_VERSION}.pc:futures/futures.pc.in])
AC_OUTPUT
